@using System.Text;
@using CBD.Services.Interfaces;
@using Microsoft.AspNetCore.Hosting
@using CBD.Enums
@using CBD.Models
@model Build

@inject IWebHostEnvironment WebHostEnvironment

@inject IImageService imageService

@functions {
    private string GetMatchingImage(string directory, string partialName)
    {
        if (string.IsNullOrEmpty(partialName))
        {
            return "unknown.png";
        }

        var imageFiles = Directory.GetFiles(directory, "*.png");

        foreach (var imagePath in imageFiles)
        {
            var imageName = imagePath.Substring(imagePath.LastIndexOf('\\') + 1);

            if (imageName != null && imageName.Contains(partialName))
            {
                return imageName;
            }
        }

        return "unknown.png";
    }



}

<div class="container mt-4">
    <div class="row">
        <div class="col">
            <h1>
                Name: @Model.Name
            </h1>
            <h3>Class: <img src="~/images/archetypes/@($"{Model.Class}.png")" /> @Model.ClassDisplay</h3>

            <p>Comment: @Model.Comment</p>
        </div>
        <div class="col ">
            <!-- ... (other HTML content) ... -->

            <a type="button" class="btn btn-primary text-center" href="data:application/json;base64,@Convert.ToBase64String(Encoding.UTF8.GetBytes(Model.RawJson))" download="@($"{Model.Class}_{Model.Name.Replace(" ", "_")}.mbd")">Download Build</a>

            <p>Mids Build Version: @Model.BuiltWith.Version</p>

            <!-- Toggle buttons for subscripts and superscripts -->
            <button id="toggleSuperscripts" class="btn btn-primary">Enhancement Levels On/Off</button>
            <button id="toggleSubscripts" class="btn btn-primary">Slot Levels On/Off</button>

        </div>
    </div>

    <!-- Sticky Top Navigation -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light sticky-top mt-2">
        <div class="container-fluid d-flex justify-content-center">
            <div class="d-flex flex-wrap justify-content-between">
                <a class="nav-link" href="#primary-powers">Primary&nbsp;|&nbsp;</a>
                <a class="nav-link" href="#secondary-powers">Secondary&nbsp;|&nbsp;</a>
                <a class="nav-link" href="#epic-powers">Epic&nbsp;|&nbsp;</a>
                <a class="nav-link" href="#pool-powers">Pool&nbsp;|&nbsp;</a>
                <a class="nav-link" href="#inherent-powers">Inherent</a>
            </div>
        </div>
    </nav>





    <div class="row mt-4">

        <div class="col col-md-4 border border-dark-subtle border-3">
            <h2 class="card-title" id="primary-powers">Primary Powers</h2>
            @foreach (var powerSet in Model.PowerSets.Where(ps => ps.Type == CBD.Enums.PowerSetType.Primary && !string.IsNullOrEmpty(ps.Name)))
            {
                <div class="card my-2 text-light">
                    <div class="card-subtitle">
                        <h4 class="mb-0 text-dark">
                            @powerSet.NameDisplay
                        </h4>
                    </div>

                    <div id="powerSet@powerSet">
                        <div class="card-text">
                            @foreach (var powerEntry in Model.PowerEntries.Where(pe => pe.PowerSetType == CBD.Enums.PowerSetType.Primary && !string.IsNullOrEmpty(pe.PowerName)))
                            {
                                <div class="col mt-2">
                                    <div class=" p-1 rounded border border-dark-subtle border-3" style="background-image: url('/images/pslot2.png'); background-size: 100% 90%; background-repeat: no-repeat;">
                                        <div class="text-center mb-1 mt-1">
                                            <h2 class="h5">(@powerEntry.Level) - @powerEntry.PowerNameDisplay</h2>
                                        </div>
                                        <div class="d-flex justify-content-left">
                                            @foreach (var slotEntry in powerEntry.SlotEntries)
                                            {
                                                <div class="slot-entry-container">
                                                    <div class="rounded-circle"
                                             data-bs-toggle="popover"
                                             data-bs-placement="bottom"
                                             data-bs-trigger="hover"
                                             data-bs-content="@slotEntry.Enhancement?.EnhancementName"
                                             style="width: 40px; height: 40px;">

                                                        @{
                                                            var enhancementName = slotEntry.Enhancement?.EnhancementName;
                                                            var sanitizedEnhancementName = enhancementName?.Split(':')[0].Trim().Replace("'", "");
                                                            if (!string.IsNullOrEmpty(sanitizedEnhancementName))
                                                            {
                                                                sanitizedEnhancementName = sanitizedEnhancementName.Replace(" ", "_");
                                                            }

                                                            var imageUrl = await imageService.EnhancementImageLookupAsync(sanitizedEnhancementName);
                                                        }

                                                        @if (!string.IsNullOrEmpty(imageUrl))
                                                        {
                                                            <img src="@imageUrl" alt="@slotEntry.Enhancement?.EnhancementName" style="width: 100%; height: 100%;" />
                                                        }




                                                        
                                                    </div>
                                                    <div class="subscript">@slotEntry.Level</div>
                                                    @if (slotEntry.Enhancement?.IoLevel != null)
                                                    {
                                                        <sup class="superscript">@((slotEntry.Enhancement?.IoLevel + 1))</sup>
                                                    }
                                                </div>

                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="col col-md-4 border border-dark-subtle border-3">
            <h2 class="card-title" id="secondary-powers">Secondary Powers</h2>
            @foreach (var powerSet in Model.PowerSets.Where(ps => ps.Type == CBD.Enums.PowerSetType.Secondary && !string.IsNullOrEmpty(ps.Name)))
            {
                <div class="card my-2 text-light">
                    <div class="card-subtitle">
                        <h4 class="mb-0 text-dark">
                            @powerSet.NameDisplay
                        </h4>
                    </div>

                    <div id="powerSet@powerSet">
                        <div class="card-body">
                            @foreach (var powerEntry in Model.PowerEntries.Where(pe => pe.PowerSetType == CBD.Enums.PowerSetType.Secondary && !string.IsNullOrEmpty(pe.PowerName)))
                            {
                                <div class="col mt-2">

                                    <div class=" p-1 rounded border border-dark-subtle border-3" style="background-image: url('/images/pslot2.png'); background-size: 100% 90%; background-repeat: no-repeat;">
                                        <div class="text-center mb-1">
                                            <h2 class="h5">(@powerEntry.Level) - @powerEntry.PowerNameDisplay</h2>
                                        </div>
                                        <div class="d-flex justify-content-left">
                                            @foreach (var slotEntry in powerEntry.SlotEntries)
                                            {
                                                <div class="slot-entry-container">
                                                    <div class="rounded-circle"
                                             data-bs-toggle="popover"
                                             data-bs-placement="bottom"
                                             data-bs-trigger="hover"
                                             data-bs-content="@slotEntry.Enhancement?.EnhancementName"
                                             style="width: 40px; height: 40px;">
                                                        @{
                                                            var enhancementName = slotEntry.Enhancement?.EnhancementName;
                                                            var sanitizedEnhancementName = enhancementName?.Split(':')[0].Trim().Replace("'", "");
                                                            if (!string.IsNullOrEmpty(sanitizedEnhancementName))
                                                            {
                                                                sanitizedEnhancementName = sanitizedEnhancementName.Replace(" ", "_");
                                                            }

                                                            var imageUrl = await imageService.EnhancementImageLookupAsync(sanitizedEnhancementName);
                                                        }

                                                        @if (!string.IsNullOrEmpty(imageUrl))
                                                        {
                                                            <img src="@imageUrl" alt="@slotEntry.Enhancement?.EnhancementName" style="width: 100%; height: 100%;" />
                                                        }
                                                    </div>
                                                    <div class="subscript">@slotEntry.Level</div>
                                                    @if (slotEntry.Enhancement?.IoLevel != null)
                                                    {
                                                        <sup class="superscript">@((slotEntry.Enhancement?.IoLevel + 1))</sup>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="col col-md-4 border border-dark-subtle border-3">

            <h2 class="card-title" id="inherent-powers">Inherent Powers</h2>
            <div class="row mt-4">
                <div class="col">
                    @foreach (var powerGroup in Model.PowerEntries.Where(pe => pe.PowerSetType == CBD.Enums.PowerSetType.Inherent && !string.IsNullOrEmpty(pe.PowerName))
                    .GroupBy(pe => pe.PowerName.Split('.')[1]))
                    {
                        <div class="card my-2 text-light">
                            <div class="card-subtitle">
                                <h4 class="mb-0 text-dark">
                                    @powerGroup.Key
                                </h4>
                            </div>

                            <div id="powerGroup@powerGroup.Key">
                                <div class="card-body">
                                    @foreach (var power in powerGroup)
                                    {
                                        <div class="col mt-2">
                                            <div class=" p-1 rounded border border-dark-subtle border-3" style="background-image: url('/images/pslot2.png'); background-size: 100% 90%; background-repeat: no-repeat;">
                                                <div class="text-center mb-1">
                                                    <h2 class="h5">(@power.Level) - @power.PowerNameDisplay</h2>
                                                </div>
                                                <div class="d-flex justify-content-left">
                                                    @foreach (var slotEntry in power.SlotEntries)
                                                    {

                                                        <div class="slot-entry-container">
                                                            <div class="rounded-circle"
                                                     data-bs-toggle="popover"
                                                     data-bs-placement="bottom"
                                                     data-bs-trigger="hover"
                                                     data-bs-content="@slotEntry.Enhancement?.EnhancementName"
                                                     style="width: 40px; height: 40px;">
                                                                @{
                                                                    var enhancementName = slotEntry.Enhancement?.EnhancementName;
                                                                    var sanitizedEnhancementName = enhancementName?.Split(':')[0].Trim().Replace("'", "");
                                                                    if (!string.IsNullOrEmpty(sanitizedEnhancementName))
                                                                    {
                                                                        sanitizedEnhancementName = sanitizedEnhancementName.Replace(" ", "_");
                                                                    }

                                                                    var imageUrl = await imageService.EnhancementImageLookupAsync(sanitizedEnhancementName);
                                                                }

                                                                @if (!string.IsNullOrEmpty(imageUrl))
                                                                {
                                                                    <img src="@imageUrl" alt="@slotEntry.Enhancement?.EnhancementName" style="width: 100%; height: 100%;" />
                                                                }
                                                            </div>
                                                            <div class="subscript">@slotEntry.Level</div>

                                                            @if (slotEntry.Enhancement?.IoLevel != null)
                                                            {
                                                                <sup class="superscript">@((slotEntry.Enhancement?.IoLevel + 1))</sup>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <h2 class="card-title" id="pool-powers">Pool Powers</h2>
            <div class="row mt-4">
                <div class="col">
                    @foreach (var powerSetGroup in Model.PowerSets.Where(ps => ps.Type == CBD.Enums.PowerSetType.Pool && !string.IsNullOrEmpty(ps.Name))
                    .GroupBy(ps => ps.Name.Split('.')[1]))
                    {
                        <div class="card my-2 text-light">
                            <div class="card-subtitle">
                                <h4 class="mb-0 text-dark">
                                    @powerSetGroup.Key
                                </h4>
                            </div>

                            <div id="powerSetGroup@powerSetGroup.Key">
                                <div class="card-body">
                                    @foreach (var powerSet in powerSetGroup)
                                    {
                                        foreach (var powerEntry in Model.PowerEntries.Where(pe => pe.PowerSetType == CBD.Enums.PowerSetType.Pool && !string.IsNullOrEmpty(pe.PowerName)))
                                        {
                                            if (powerEntry.PowerName.StartsWith(powerSet.Name))
                                            {
                                                <div class="col mt-2">
                                                    <div class=" p-1 rounded border border-dark-subtle border-3" style="background-image: url('/images/pslot2.png'); background-size: 100% 90%; background-repeat: no-repeat;">
                                                        <div class="text-center mb-1">
                                                            <h2 class="h5">(@powerEntry.Level) - @powerEntry.PowerNameDisplay</h2>
                                                        </div>
                                                        <div class="d-flex justify-content-left">
                                                            @foreach (var slotEntry in powerEntry.SlotEntries)
                                                            {
                                                                <div class="slot-entry-container">
                                                                    <div class="rounded-circle"
                                                     data-bs-toggle="popover"
                                                     data-bs-placement="bottom"
                                                     data-bs-trigger="hover"
                                                     data-bs-content="@slotEntry.Enhancement?.EnhancementName"
                                                     style="width: 40px; height: 40px;">
                                                                        @{
                                                                            var enhancementName = slotEntry.Enhancement?.EnhancementName;
                                                                            var sanitizedEnhancementName = enhancementName?.Split(':')[0].Trim().Replace("'", "");
                                                                            if (!string.IsNullOrEmpty(sanitizedEnhancementName))
                                                                            {
                                                                                sanitizedEnhancementName = sanitizedEnhancementName.Replace(" ", "_");
                                                                            }

                                                                            var imageUrl = await imageService.EnhancementImageLookupAsync(sanitizedEnhancementName);
                                                                        }

                                                                        @if (!string.IsNullOrEmpty(imageUrl))
                                                                        {
                                                                            <img src="@imageUrl" alt="@slotEntry.Enhancement?.EnhancementName" style="width: 100%; height: 100%;" />
                                                                        }
                                                                    </div>
                                                                    <div class="subscript">@slotEntry.Level</div>
                                                                    @if (slotEntry.Enhancement?.IoLevel != null)
                                                                    {
                                                                        <sup class="superscript">@((slotEntry.Enhancement?.IoLevel + 1))</sup>
                                                                    }
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>

            <h2 class="card-title" id="epic-powers">Epic Powers</h2>
            <div class="row mt-4">
                <div class="col">
                    @foreach (var powerSet in Model.PowerSets.Where(ps => ps.Type == CBD.Enums.PowerSetType.Epic && !string.IsNullOrEmpty(ps.Name)))
                    {
                        <div class="card my-2 text-light">
                            <div class="card-subtitle">
                                <h4 class="mb-0 text-dark">
                                    @powerSet.NameDisplay
                                </h4>
                            </div>

                            <div id="powerSet@powerSet">
                                <div class="card-body">
                                    @foreach (var powerEntry in Model.PowerEntries.Where(pe => pe.PowerSetType == CBD.Enums.PowerSetType.Epic && !string.IsNullOrEmpty(pe.PowerName)))
                                    {
                                        <div class="col mt-2">

                                            <div class=" p-1 rounded border border-dark-subtle border-3" style="background-image: url('/images/pslot2.png'); background-size: 100% 90%; background-repeat: no-repeat;">
                                                <div class="text-center mb-1">
                                                    <h2 class="h5">(@powerEntry.Level) - @powerEntry.PowerNameDisplay</h2>
                                                </div>
                                                <div class="d-flex justify-content-left">
                                                    @foreach (var slotEntry in powerEntry.SlotEntries)
                                                    {
                                                        <div class="slot-entry-container">
                                                            <div class="rounded-circle"
                                                     data-bs-toggle="popover"
                                                     data-bs-placement="bottom"
                                                     data-bs-trigger="hover"
                                                     data-bs-content="@slotEntry.Enhancement?.EnhancementName"
                                                     style="width: 40px; height: 40px;">
                                                                @{
                                                                    var enhancementName = slotEntry.Enhancement?.EnhancementName;
                                                                    var sanitizedEnhancementName = enhancementName?.Split(':')[0].Trim().Replace("'", "");
                                                                    if (!string.IsNullOrEmpty(sanitizedEnhancementName))
                                                                    {
                                                                        sanitizedEnhancementName = sanitizedEnhancementName.Replace(" ", "_");
                                                                    }

                                                                    var imageUrl = await imageService.EnhancementImageLookupAsync(sanitizedEnhancementName);
                                                                }

                                                                @if (!string.IsNullOrEmpty(imageUrl))
                                                                {
                                                                    <img src="@imageUrl" alt="@slotEntry.Enhancement?.EnhancementName" style="width: 100%; height: 100%;" />
                                                                }
                                                            </div>
                                                            <div class="subscript">@slotEntry.Level</div>
                                                            @if (slotEntry.Enhancement?.IoLevel != null)
                                                            {
                                                                <sup class="superscript">@((slotEntry.Enhancement?.IoLevel + 1))</sup>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

        </div>
    </div>


</div>



@section Scripts {
    <script>
        $(document).ready(function () {
            $("#toggleSubscripts").click(function () {
                $(".subscript").toggle();
            });

            $("#toggleSuperscripts").click(function () {
                $(".superscript").toggle();
            });
        });
    </script>
}
